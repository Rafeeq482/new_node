{"ast":null,"code":"// Authentication Service\n// This file handles all authentication operations with AWS Cognito\nimport{Auth}from'aws-amplify';// Note: If you're getting SECRET_HASH errors, disable the client secret\n// in your Cognito App Client settings. Web apps should not use client secrets.\nexport const authService={// Sign up a new user\nsignUp:async(username,password,email)=>{try{const result=await Auth.signUp({username,password,attributes:{email}});return{success:true,data:result};}catch(error){return{success:false,error:error.message};}},// Confirm user registration with verification code\nconfirmSignUp:async(username,code)=>{try{await Auth.confirmSignUp(username,code);return{success:true};}catch(error){return{success:false,error:error.message};}},// Sign in user\nsignIn:async(username,password)=>{try{const user=await Auth.signIn(username,password);return{success:true,data:user};}catch(error){return{success:false,error:error.message};}},// Sign out user\nsignOut:async()=>{try{await Auth.signOut();return{success:true};}catch(error){return{success:false,error:error.message};}},// Get current authenticated user\ngetCurrentUser:async()=>{try{const user=await Auth.currentAuthenticatedUser();return{success:true,data:user};}catch(error){return{success:false,error:error.message};}},// Check if user is authenticated\nisAuthenticated:async()=>{try{await Auth.currentAuthenticatedUser();return true;}catch(error){return false;}}};","map":{"version":3,"names":["Auth","authService","signUp","username","password","email","result","attributes","success","data","error","message","confirmSignUp","code","signIn","user","signOut","getCurrentUser","currentAuthenticatedUser","isAuthenticated"],"sources":["/var/www/html/new_node/src/services/authService.js"],"sourcesContent":["// Authentication Service\n// This file handles all authentication operations with AWS Cognito\n\nimport { Auth } from 'aws-amplify';\n\n// Note: If you're getting SECRET_HASH errors, disable the client secret\n// in your Cognito App Client settings. Web apps should not use client secrets.\n\nexport const authService = {\n  // Sign up a new user\n  signUp: async (username, password, email) => {\n    try {\n      const result = await Auth.signUp({\n        username,\n        password,\n        attributes: {\n          email,\n        },\n      });\n      return { success: true, data: result };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Confirm user registration with verification code\n  confirmSignUp: async (username, code) => {\n    try {\n      await Auth.confirmSignUp(username, code);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Sign in user\n  signIn: async (username, password) => {\n    try {\n      const user = await Auth.signIn(username, password);\n      return { success: true, data: user };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Sign out user\n  signOut: async () => {\n    try {\n      await Auth.signOut();\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Get current authenticated user\n  getCurrentUser: async () => {\n    try {\n      const user = await Auth.currentAuthenticatedUser();\n      return { success: true, data: user };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Check if user is authenticated\n  isAuthenticated: async () => {\n    try {\n      await Auth.currentAuthenticatedUser();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n"],"mappings":"AAAA;AACA;AAEA,OAASA,IAAI,KAAQ,aAAa,CAElC;AACA;AAEA,MAAO,MAAM,CAAAC,WAAW,CAAG,CACzB;AACAC,MAAM,CAAE,KAAAA,CAAOC,QAAQ,CAAEC,QAAQ,CAAEC,KAAK,GAAK,CAC3C,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAN,IAAI,CAACE,MAAM,CAAC,CAC/BC,QAAQ,CACRC,QAAQ,CACRG,UAAU,CAAE,CACVF,KACF,CACF,CAAC,CAAC,CACF,MAAO,CAAEG,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAEH,MAAO,CAAC,CACxC,CAAE,MAAOI,KAAK,CAAE,CACd,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAED;AACAC,aAAa,CAAE,KAAAA,CAAOT,QAAQ,CAAEU,IAAI,GAAK,CACvC,GAAI,CACF,KAAM,CAAAb,IAAI,CAACY,aAAa,CAACT,QAAQ,CAAEU,IAAI,CAAC,CACxC,MAAO,CAAEL,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOE,KAAK,CAAE,CACd,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAED;AACAG,MAAM,CAAE,KAAAA,CAAOX,QAAQ,CAAEC,QAAQ,GAAK,CACpC,GAAI,CACF,KAAM,CAAAW,IAAI,CAAG,KAAM,CAAAf,IAAI,CAACc,MAAM,CAACX,QAAQ,CAAEC,QAAQ,CAAC,CAClD,MAAO,CAAEI,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAEM,IAAK,CAAC,CACtC,CAAE,MAAOL,KAAK,CAAE,CACd,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAED;AACAK,OAAO,CAAE,KAAAA,CAAA,GAAY,CACnB,GAAI,CACF,KAAM,CAAAhB,IAAI,CAACgB,OAAO,CAAC,CAAC,CACpB,MAAO,CAAER,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOE,KAAK,CAAE,CACd,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAED;AACAM,cAAc,CAAE,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACF,KAAM,CAAAF,IAAI,CAAG,KAAM,CAAAf,IAAI,CAACkB,wBAAwB,CAAC,CAAC,CAClD,MAAO,CAAEV,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAEM,IAAK,CAAC,CACtC,CAAE,MAAOL,KAAK,CAAE,CACd,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAED;AACAQ,eAAe,CAAE,KAAAA,CAAA,GAAY,CAC3B,GAAI,CACF,KAAM,CAAAnB,IAAI,CAACkB,wBAAwB,CAAC,CAAC,CACrC,MAAO,KAAI,CACb,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,MAAK,CACd,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}